#!/bin/bash
# This start-stop-status is called about once per second!
user=$(whoami) # EnvVar $USER may be not well set
# user = "root" if the sudo cp /var/packages/$SYNOPKG_PKGNAME/conf/privilege.root /var/packages/$SYNOPKG_PKGNAME/conf/privilege
# user = "$SYNOPKG_PKGNAME" = '<appName>' if the copy was not done
LOG="/var/tmp/$SYNOPKG_PKGNAME.log"
DTFMT="+%Y-%m-%d %H:%M:%S"
SCRIPTPATHTHIS="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; /bin/pwd -P )" # /var/packages/UsbEject/scripts !!
SCRIPT_EXEC_LOG="$APPDATA/execLog" # 2022-12-23: "start-stop-status: line 167/168: No such file or directory" found in /var/log/bash_err.log
ruleDfilePathName="/usr/lib/udev/rules.d/98-$SYNOPKG_PKGNAME.rules"
case $1 in
  prestart)
    echo "$(date "$DTFMT"): PRESTART of start-stop-status script V$SYNOPKG_PKGVER '$1' as user '$user'<br/>" >> "$LOG"
    #### is occuring if in INFO: precheckstartstop="yes"
    ;;
	start)
		### Start this package.
    configFilePathName="/var/packages/$SYNOPKG_PKGNAME/var/config"
    source "/var/packages/$SYNOPKG_PKGNAME/target/common" start-stop-status # set lngUser
    echo "$(date "$DTFMT"): start-stop-status script V$SYNOPKG_PKGVER '$1' as user '$user'. SYNOPKG_DSM_LANGUAGE='$lngUser'<br/>" >> "$LOG"
    if [ "$user" != "root" ]; then
      echo "$(date "$DTFMT"): start-stop-status '$1' as user '$user' != \"root\". <br/>" >> "$LOG"
      eval $(grep -s "copyPriviledge=" "/var/packages/$SYNOPKG_PKGNAME/target/ui/texts/$lngUser/lang.txt")
      if [ "$copyPriviledge" != "" ]; then
        echo "$copyPriviledge" > "$SYNOPKG_TEMP_LOGFILE"
      else
        echo "The copy command 'cp /var/packages/$SYNOPKG_PKGNAME/conf/privilege.root /var/packages/$SYNOPKG_PKGNAME/conf/privilege' was not yet executed. Therefore the package '$SYNOPKG_PKGNAME' cannot be started" > "$SYNOPKG_TEMP_LOGFILE"
      fi
      # exit 3 # this would run into repair loop and no exit possible except uninstall/re-install
    else # root
      error=0
      # enable log deleting for ui/logfile.cgi:
      chmod 664 "$LOG"
      chown "$SYNOPKG_PKGNAME":"$SYNOPKG_PKGNAME" "$LOG"
      if [[ ! -L "/var/packages/$SYNOPKG_PKGNAME/var/detailLog" ]]; then
        ln -s "$LOG" "/var/packages/$SYNOPKG_PKGNAME/var/detailLog" # for access from cgi file
      fi
      chmod 644 "/var/packages/$SYNOPKG_PKGNAME/var/detailLog"
      chown --no-dereference "$SYNOPKG_PKGNAME":"$SYNOPKG_PKGNAME" "/var/packages/$SYNOPKG_PKGNAME/var/detailLog"
      # enable WebUI reading of drives
      # driveMarkerFolder="/var/packages/UsbEject/tmp"
      # chown "$SYNOPKG_PKGNAME":"$SYNOPKG_PKGNAME" "$driveMarkerFolder" not needed
      # check whether the entered user/usergroup for desktop notification is valid:
      notyfyUsers=$(grep "^NOTIFY_USERS=" "$configFilePathName")
      notyfyUsers=${notyfyUsers#NOTIFY_USERS=\"}
      notyfyUsers=${notyfyUsers%\"}
      if [[ -n "$notyfyUsers" ]]; then # not empty ==> desktop messages active
        if [[ $notyfyUsers == "@"* ]]; then # Groupname
          # syngroup --enum all requires root access
          groupExist=$(synogroup --enum all | grep "${notyfyUsers:1}") # account which are allowing login
          if [[ -z $groupExist ]]; then # Fehlermeldung
            echo "$(date "$DTFMT"): The group account '$notyfyUsers' for desktop message does not exist! Wrong entry replaced by '@users'" >> "$LOG"
            eval $(grep -s "notifyGroupError=" "/var/packages/$SYNOPKG_PKGNAME/target/ui/texts/$lngUser/lang.txt")
            echo "$notifyGroupError" > "$SYNOPKG_TEMP_LOGFILE"
            sed -i 's/^NOTIFY_USERS=.*$/NOTIFY_USERS=@users/' "$configFilePathName"
          fi
        else # single user
          # userExist=$(grep -o "^${notyfyUsers}:" /etc/passwd) # long list of accounts!
          userExist=$(synouser --enum all | grep "${notyfyUsers}") # account which are allowing login
          # alternative: synouser --get "${notyfyUsers}"
          if [[ -z $userExist ]]; then # Fehlermeldung
            echo "$(date "$DTFMT"): The user account '$notyfyUsers' for desktop messages does not exist! Therefore the wrong entry replaced by '@users'. Run Installation again to enter another value!" >> "$LOG"
            eval $(grep -s "notifyUserError=" "/var/packages/$SYNOPKG_PKGNAME/target/ui/texts/$lngUser/lang.txt")
            echo "$notifyUserError" > "$SYNOPKG_TEMP_LOGFILE"
            sed -i 's/^NOTIFY_USERS=.*$/NOTIFY_USERS=@users/' "$configFilePathName"
          fi # not existing user
        fi # if goupe else user
      fi
    fi # user root
    if [ -f "$ruleDfilePathName" ];  then
      echo "$(date "$DTFMT"): start executed, but app was already running<br/>" >> "$LOG"
      exit 1
    else
      if [[ "$error" -eq "0" ]]; then
        echo "$(date "$DTFMT"): start-stop-status script 'start', SYNOPKG_PKGDEST='$SYNOPKG_PKGDEST'<br/>" >> "$LOG"
        resultStart=$(cp "/var/packages/$SYNOPKG_PKGNAME/target/rules" "$ruleDfilePathName")
        retvalStart=$?
        echo "$(date "$DTFMT"): cp rules to '$ruleDfilePathName': retval=$retvalStart, result='$resultStart'<br/>" >> "$LOG"
        chmod 644 "$ruleDfilePathName"
        # chown root:root "$ruleDfilePathName" # required?
        /usr/bin/udevadm control --reload-rules
        if [ -f "$ruleDfilePathName" ];  then
          echo "$(date "$DTFMT"): start-stop-status, file 'rules' successfully copied to $ruleDfilePathName<br/>" >> "$LOG"
          extdisks=$(/usr/syno/bin/synousbdisk -enum) # e.g. Total 2 USB devices: usb2 usb1
          # echo "extdisks0='$extdisks'"
          extdisks=$(echo "${extdisks#*:}" | sed -z 's/\n/ /g' | sed -z 's/  / /g' | sed -z 's/^ //' | sed -z 's/ $//')
          # echo "extdisks1='$extdisks'"
          if [[ -n "$extdisks" ]]; then
            mapfile -d " " -t diskArray < <(/bin/printf '%s' "$extdisks")
            # echo "ItemCount= ${#diskArray[@]}"
            echo "$(date "$DTFMT"): start-stop-status, ${#diskArray[@]} actually attached USB devices found<br/>" >> "$LOG"
            for disk in "${diskArray[@]}"; do # e.g 'usb1'
              # echo "disk='$disk'"
              mountPath="$(/usr/syno/bin/synousbdisk -info "$disk" | grep 'Mount Path:')"
              mountPath=${mountPath#*Mount Path: }
              # echo "disk='$disk', mountPath='$mountPath'"
              devPart=$(mount | grep "$mountPath") # e.g. '/dev/usb1p1 on /volumeUSB18/usbshare type btrfs (rw,relatime,nospace_cache,metadata_ratio=50,syno_allocator,subvolid=5,subvol=/)'
              devPart="${devPart%% *}" # e.g. '/dev/usb1p1'
              devPart="${devPart##*/}" # e.g. 'usb1p1'
              #echo "disk='$disk', devPart='$devPart', mountPath='$mountPath'"
              echo "$(date "$DTFMT"): start-stop-status calling \"/var/packages/$SYNOPKG_PKGNAME/target/udev $devPart \&\"<br/>" >> "$LOG"
              "/var/packages/$SYNOPKG_PKGNAME/target/udev" "$devPart" "START" &
            done
          else
            echo "$(date "$DTFMT"): start-stop-status, actually no attached USB devices found<br/>" >> "$LOG"
          fi
          echo "$(date "$DTFMT"): Package '$SYNOPKG_PKGNAME' was STARTED!" >> "$SCRIPT_EXEC_LOG"
          echo "$(date "$DTFMT"): ... start via start-stop-status script successfully finished<br/>" >> "$LOG"
        fi
      else
        echo "$(date "$DTFMT"): start-stop-status script 'start' failed!<br/>" >> "$LOG"
      fi
    fi
    exit 0
  ;;
  prestop)  # can be disabled via precheckstartstop in INFO file
    #### is not occuring !!!????
    echo "$(date "$DTFMT"): PRESTOP start-stop-status script V$SYNOPKG_PKGVER '$1' as user '$user'<br/>" >> "$LOG"
  ;;
  stop)
    echo "$(date "$DTFMT"): start-stop-status script V$SYNOPKG_PKGVER '$1' as user '$user'<br/>" >> "$LOG"
    # rename the marker files so that sleeping UsbEject.sh processes are continuing:

    oldShopt=$(shopt -p nullglob)
    shopt -s nullglob # do not return the mask itself if the folder is empty
    for i in "/var/packages/$SYNOPKG_PKGNAME/tmp/"*; do
      mv "$i" "${i}__STOP"
      echo "$(date "$DTFMT"): re-name done: $i => ${i}__STOP<br/>" >> "$LOG"
    done
    $oldShopt

    if [ -f "$ruleDfilePathName" ]; then
      resultStop=$(rm -f "$ruleDfilePathName")
      retvalStop=$?
      echo "$(date "$DTFMT"): rm $(basename "$ruleDfilePathName") retval=$retvalStop, result='$resultStop'<br/>" >> "$LOG"
      /usr/bin/udevadm control --reload-rules
      echo "$(date "$DTFMT"): Package '$SYNOPKG_PKGNAME' was STOPPED!" >> "$SCRIPT_EXEC_LOG"
    else
      echo "$(date "$DTFMT"): stop executed, but app was not running<br/>" >> "$LOG"
    fi
    echo "$(date "$DTFMT"): ... stop via start-stop-status script done<br/>" >> "$LOG"
    exit 0
  ;;
  status)
    if [ -f "$ruleDfilePathName" ]; then
      exit 0
    else
      exit 1
    fi
  ;;
esac

